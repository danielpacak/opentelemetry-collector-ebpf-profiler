minimumLimaVersion: "1.0.0"
images:
  # Try to use release-yyyyMMdd image if available. Note that release-yyyyMMdd will be removed after several months.
  - location: "https://cloud-images.ubuntu.com/releases/22.04/release-20250108/ubuntu-22.04-server-cloudimg-amd64.img"
    arch: "x86_64"
    digest: "sha256:610e1d37fe06fa23db2ff34d1c03711e55d73b7c3e4482503f50c4d2f9b9d06d"
  - location: "https://cloud-images.ubuntu.com/releases/22.04/release-20250108/ubuntu-22.04-server-cloudimg-arm64.img"
    arch: "aarch64"
    digest: "sha256:65a95b38656abec67ce037e6dbceb47721f672a21882fbd12999639d18f9a283"
  # Fallback to the latest release image.
  # Hint: run `limactl prune` to invalidate the cache
  - location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"
    arch: "x86_64"
  - location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
    arch: "aarch64"
cpus: 4
memory: 8Gib
disk: 50Gib
mounts:
  - location: "~"
    writable: true
  - location: "/tmp/lima"
    writable: true
upgradePackages: true
provision:
  # `system` is executed with the root privilege
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      command -v docker >/dev/null 2>&1 && exit 0

      export DEBIAN_FRONTEND=noninteractive

      # Add Docker's official GPG key:
      apt-get update -qq && apt-get install -y \
        ca-certificates \
        curl

      install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      chmod a+r /etc/apt/keyrings/docker.asc

      # Add the repository to Apt sources:
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null

      # Install the Docker packages
      apt-get update -qq && apt-get install -y \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        docker-buildx-plugin \
        docker-compose-plugin
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      command -v kubectl >/dev/null 2>&1 && exit 0

      # Install Kubectl
      snap install kubectl --classic
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      command -v helm >/dev/null 2>&1 && exit 0

      # Install Helm
      snap install helm --classic
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      command -v k9s >/dev/null 2>&1 && exit 0
      export DEBIAN_FRONTEND=noninteractive
      export K9S_VERSION="v0.50.5"

      # Install K9s
      wget https://github.com/derailed/k9s/releases/download/$K9S_VERSION/k9s_linux_$(dpkg --print-architecture).deb -O k9s.deb
      apt install --yes ./k9s.deb && rm ./k9s.deb
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      command -v clang >/dev/null 2>&1 && exit 0

      # Install LLVM with Clang frontend, and libbpf
      export DEBIAN_FRONTEND=noninteractive
      export LLVM_VERSION=18
      export LIBBPF_VERSION=v1.3.0

      apt-get update -qq && apt-get install -y \
        make \
        libelf-dev \
        linux-tools-$(uname -r) \
        pkgconf \
        lsb-release \
        wget \
        software-properties-common \
        gnupg

      wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && ./llvm.sh $LLVM_VERSION \
        && update-alternatives --install /usr/local/bin/llvm-strip llvm-strip $(which llvm-strip-$LLVM_VERSION) 100 \
        && update-alternatives --install /usr/local/bin/clang clang $(which clang-$LLVM_VERSION) 100

      git clone --branch ${LIBBPF_VERSION} --depth 1 https://github.com/libbpf/libbpf.git \
        && make -C libbpf/src/ CC=clang install_headers
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      command -v go >/dev/null 2>&1 && exit 0

      # Install Golang
      export GO_VERSION="1.24.3"

      wget https://go.dev/dl/go$GO_VERSION.linux-$(dpkg --print-architecture).tar.gz -O go.tar.gz
      tar -C /usr/local -xzvf go.tar.gz
      rm -rf go
      echo 'export GOROOT=/usr/local/go' >> ~/.profile
      echo 'export GOPATH=$HOME/go' >> ~/.profile
      echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' >> ~/.profile
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      usermod -aG docker {{.User}}
  - mode: user
    script: |
      #!/bin/bash
      set -eux -o pipefail

      if grep -q "Lima provision START" ~/.bashrc; then
        exit 0
      fi

      echo '# Lima provision START' >> ~/.bashrc
      echo 'export GOROOT=/usr/local/go' >> ~/.bashrc
      echo 'export GOPATH=$HOME/go' >> ~/.bashrc
      echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' >> ~/.bashrc

      echo 'source <(kubectl completion bash)' >> ~/.bashrc
      echo 'alias k=kubectl' >> ~/.bashrc
      echo 'complete -o default -F __start_kubectl k' >> ~/.bashrc

      echo 'source <(helm completion bash)' >> ~/.bashrc
      echo '# Lima provision END' >> ~/.bashrc
